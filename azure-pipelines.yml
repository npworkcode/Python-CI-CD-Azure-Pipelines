# Python to Linux Web App on Azure
# Build your Python project and deploy it to Azure as a Linux Web App.
# Change python version to one thats appropriate for your application.
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - ./Flask_ML_Python_App-Azure_Pipelines/**.py
    exclude:
      - ./Flask_ML_Python_App-GitHub_Actions
      - ./Hello_Python_App

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: '5b9e255a-612c-4ed6-96c9-1cf0d95adacb'

  # Web app name
  webAppName: 'python04152021-ml-project2'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Environment name
  environmentName: 'python04152021-ml-project2'

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)

  # Python version: 3.7
  pythonVersion: '3.7'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      Self-Hosted-Ubuntu-Agent
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'

    - script: |
        python -m venv antenv
        source antenv/bin/activate
        make install
      workingDirectory: $(projectRoot)
      displayName: "Install requirements"

    - script: |
        make lint
      workingDirectory: $(projectRoot)
      displayName: "Lint Python App with pylint"

    - script: |
        make test
      workingDirectory: $(projectRoot)
      displayName: "Test with pytest and code coverage"

    - script: |
        echo Deleting antenv
        deactivate
        rm -rf antenv
      workingDirectory: $(projectRoot)
      displayName: "Remove virtual environment before zip"



    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python version'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : python04152021-ml-project2'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(webAppName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip